
services:

  db:
    image: mysql:8
    restart: always
    environment:
      MYSQL_DATABASE: microservice_ressource
      MYSQL_ROOT_PASSWORD: root
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      start_period: 30s
    volumes:
      - db_mysql:/var/lib/mysql   # Persister les données de la BD entre tous les conteneurs 
      #- C:/xampp/mysql/data:/var/lib/mysql   #persister les données avec bd locale  et j'enleve volumes vers la fin 

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=financeDB
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5

  financeService:
    build: ./finance
    image: yosrba/finance-service:1.0
    container_name: financeService
    restart: always
    ports:
      - "3000:3000"
    env_file:
      - ./finance/.env  # Path to your .env file
    environment:
      - EUREKA_HOST=eureka-server
      - HOST_IP=financeService  # For Eureka registration
    depends_on:
      API-gateway:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    volumes:
      - ./finance:/usr/src/app  # For development (hot-reload)
      - /usr/src/app/node_modules
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]

  eureka-server:
    build: ./Eureka
    image: yosrba/eureka:1.0
    container_name: eureka
    ports:
      - "8761:8761"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  configServer:
    build: ./configServer_
    image: yosrba/config:1.0
    container_name: config
    ports:
      - "8888:8888"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      - eureka-server
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/


  ressource:
    build: ./Ressource
    image: yosrba/ressource:1.0
    container_name: ressource
    ports:
      - "8082:8082"
    depends_on:
      db:
        condition: service_healthy
      eureka-server:
        condition: service_started
      configServer:
        condition: service_healthy
      API-gateway:
        condition: service_healthy
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - spring.datasource.url=jdbc:mysql://db:3306/microservice_ressource?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=false&max_allowed_packet=15728640
      - spring.datasource.username=root
      - spring.datasource.password=root

  API-gateway:
    build: ./ApiGetWay
    image: yosrba/apigetway:1.0
    container_name: apigetway
    ports:
      - "8090:8090"
    depends_on:
      - eureka-server
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8090/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5


  departementService:
    build: ./departement
    image: yosrba/departementservice:1.1
    container_name: departementService
    ports:
      - "8089:8089"
    depends_on:
      db:
        condition: service_healthy
      eureka-server:
        condition: service_started
      configServer:
        condition: service_started
      API-gateway:
        condition: service_healthy
    environment:
      - spring.datasource.url=jdbc:mysql://db:3306/departementService?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=false&max_allowed_packet=15728640
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - spring.datasource.username=root
      - spring.datasource.password=root

  formation:
    build: ./formation  # Path to your Spring Boot project
    image: yosrba/formation:1.0
    container_name: formation
    ports:
      - "8083:8083"  # Expose the Spring Boot application on port 8089
    depends_on:
      db:
        condition: service_healthy
      eureka-server:
        condition: service_started
      configServer:
        condition: service_started
      API-gateway:
        condition: service_healthy
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/formation?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=false&max_allowed_packet=15728640
      - spring.datasource.username=root
      - spring.datasource.password=root
      - KEYCLOAK_URL=http://keycloak:8092
      - KEYCLOAK_REALM=projet
      - KEYCLOAK_CLIENT_ID=microservice


  universite:
    build: ./university
    image: yosrba/university:1.0
    container_name: university
    ports:
      - "8085:8085"
    depends_on:
      eureka-server:
        condition: service_healthy
      API-gateway:
        condition: service_healthy
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/

  contrat:
    build: ./contrat
    image: yosrba/contrat:1.0
    container_name: contrat
    ports:
      - "8087:8087"
    depends_on:
      eureka-server:
        condition: service_healthy
      API-gateway:
        condition: service_healthy
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - KEYCLOAK_URL=http://keycloak:8092

  keycloak:
    build: ./keycloak-23.0.0  # Build from your Dockerfile
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=adminn
      - KC_HTTP_ENABLED=true
      - KC_HOSTNAME=keycloak
      # Remove KC_IMPORT (handled in Dockerfile)
    volumes:
      - ./data/import:/opt/keycloak/data/import  # Ensure the JSON file is mounted
    ports:
      - "8092:8092"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8092/health/ready" ]
      interval: 10s
      timeout: 5s
      retries: 10





volumes:
  db_mysql:
  mongo_data:
